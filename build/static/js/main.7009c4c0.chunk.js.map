{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_isMounted","onClick","onClickNext","bind","onClickRPP","handleChange","handleSubmit","handleClearForm","state","error","isLoaded","items","getpagesarray","totalitems","page","itemsPerPage","typedvalue","searchedvalue","this","getpageurl","URL","document","location","searchParams","get","setState","parseInt","fetch","method","headers","body","JSON","stringify","filters","then","response","json","Array","from","Math","ceil","keys","prevProps","prevState","type","values","window","history","replaceState","$","removeClass","addClass","nextprev","lastpage","event","target","value","preventDefault","message","className","onSubmit","placeholder","onChange","Button","id","slice","map","item","key","Card","bg","Header","as","book_title","Body","Title","book_author","Text","book_publication_year","book_publication_country","book_publication_city","book_pages","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.7009c4c0.chunk.js","sourcesContent":["import React from 'react';\nimport Card from \"react-bootstrap/Card\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport './scss/App.scss';\nimport $ from 'jquery';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._isMounted = false;\n    this.onClick = this.onClickNext.bind(this);\n    this.onClickRPP = this.onClickRPP.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClearForm = this.handleClearForm.bind(this);\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      getpagesarray: [],\n      totalitems: 0,\n      page: 1,\n      itemsPerPage: 20,\n      typedvalue: '',\n      searchedvalue: '',\n    };\n  }\n\n  componentDidMount() {\n    // get json data from books api\n    this._isMounted = true;\n\n    // get url parameter if page number has been added\n    let params = (new URL(document.location)).searchParams;\n    let getpageurl = params.get('page');\n    if (getpageurl != null){\n      this.setState({page: parseInt(getpageurl)});\n    }\n    fetch(\"http://nyx.vima.ekt.gr:3000/api/books/\", {\n      method: \"post\",\n      headers : {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        page: this.state.page,\n        itemsPerPage: this.state.itemsPerPage,\n        filters: []\n      })\n    })\n    .then((response) => response.json())\n    .then((response) => {\n        this.setState({\n          items: response['books'],\n          totalitems: response['count'],\n          isLoaded: true,\n          getpagesarray: Array.from(Array(Math.ceil(response['count']/this.state.itemsPerPage)).keys())\n        });\n\n        // console.log(\"messages: \" + messages['books']);\n\n      });\n\n      // remove parameter from url\n      // window.history.replaceState(null, null, window.location.pathname);\n\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"componentDidUpdate: page - \" + prevState.page + \" itemsPerPage - \" + prevState.itemsPerPage);\n\n    // don't update if state hasn't changed\n    if ((prevState.page !== this.state.page) || (prevState.itemsPerPage !== this.state.itemsPerPage) || (prevState.searchedvalue !== this.state.searchedvalue)) {\n\n      // when someone clicks next/prev or items per page\n      fetch(\"http://nyx.vima.ekt.gr:3000/api/books/\", {\n        method: \"post\",\n        headers : {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          page: this.state.page,\n          itemsPerPage: this.state.itemsPerPage,\n          filters: [{type: \"all\", values: [this.state.searchedvalue]}]\n          // filters: [{type: \"all\", values: [\"Hertzberg\"]}]\n        })\n      })\n      .then((response) => response.json())\n      .then((response) => {\n          this.setState({\n            items: response['books'],\n            isLoaded: true,\n            totalitems: response['count'],\n            getpagesarray: Array.from(Array(Math.ceil((response['count']+20)/this.state.itemsPerPage)).keys())\n          });\n          // console.log(\"messages: \" + messages['books']);\n        });\n\n    }\n\n    // update page parameter in url\n    window.history.replaceState(null, null, \"/?page=\" + parseInt(this.state.page));\n\n    // apply active class to page 1\n    $(\".book-listing-page\").removeClass('book-listing-page-active');\n    $(\".book-listing-page.page-\" + this.state.page).addClass('book-listing-page-active');\n\n  }\n\n  // get next or previous page or if someone clicks a page number\n  onClickNext(nextprev) {\n    // prev and next only availble if more than 20 results\n    if ((this.state.searchedvalue !== \"\") || (this.state.totalitems <20)){\n    } else {\n\n      // if a page number is selected\n      if ((nextprev !== 'prev') && (nextprev !== 'next')){\n        this.setState({page: nextprev});\n      } else {\n\n        let lastpage = Math.ceil(this.state.totalitems/this.state.itemsPerPage);\n        if (nextprev === \"next\"){\n          // if current page is lastpage then get page 1\n          if (this.state.page === lastpage){\n            this.setState({\n              page: 1,\n            })\n          } else {\n            this.setState({\n              page: this.state.page + 1,\n            })\n          }\n          // if current page is 1 then get lastpage\n        } else if (this.state.page === 1){\n          this.setState({\n            page: lastpage,\n          })\n          } else {\n            this.setState({\n              page: this.state.page - 1,\n            })\n        }\n\n        // console.log(\"onClick: \" + nextprev);\n\n      }\n\n    }\n  }\n\n  // change results per page\n  onClickRPP(itemsPerPage){\n    // console.log(\"itemsPerPage: \" + itemsPerPage);\n    // this.setState({\n    //   itemsPerPage: parseInt(itemsPerPage),\n    // })\n  }\n\n  handleChange(event) {\n    this.setState({typedvalue: event.target.value});\n  }\n\n  handleSubmit(event) {\n    this.setState({searchedvalue: this.state.typedvalue, page: 1,});\n    event.preventDefault();\n  }\n\n  handleClearForm(){\n    this.setState({searchedvalue: \"\", typedvalue: \"\"});\n  }\n\n  render() {\n    const { error, isLoaded } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"book-listing-container\">\n\n          <div className=\"book-listing-total\" >Total Items: {this.state.totalitems}</div>\n\n          <form className=\"book-listing-form\" onSubmit={this.handleSubmit}>\n            <label>\n              <input type=\"text\" placeholder=\"Book Search...\" value={this.state.typedvalue} onChange={this.handleChange} />\n            </label>\n            <input onClick={this.handleClearForm} type=\"reset\" value=\"Reset\" />\n            <input type=\"submit\" value=\"Search\" />\n          </form>\n\n          <Button className=\"btn-prev\" onClick={this.onClickNext.bind(this, 'prev')}>Prev</Button>\n          <Button className=\"btn-next\"onClick={this.onClickNext.bind(this, 'next')}>Next</Button>\n\n          <div className=\"book-listing-paginate\" id=\"book-listing-paginate\">\n            {this.state.getpagesarray.slice(1).map(item => (\n              <span className={`book-listing-page page-${item}`} key={item} onClick={this.onClickNext.bind(this, item)}>{item}</span>\n            ))}\n          </div>\n\n          {/*<Button onClick={this.onClickRPP.bind(this, '20')}>20</Button>\n          <Button onClick={this.onClickRPP.bind(this, '50')}>50</Button>\n          <Button onClick={this.onClickRPP.bind(this, '100')}>100</Button>*/}\n\n          <div className=\"book-listing-items\">\n\n            {this.state.items.map(item => (\n\n              <Card className=\"card-custom-sml\" bg=\"primary\" key={item.id}>\n                <Card.Header as=\"h5\">{item.book_title}</Card.Header>\n                <Card.Body>\n                  <Card.Title>{item.book_author}</Card.Title>\n                  <Card.Text>\n                    <span>Year: {item.book_publication_year}</span>\n                    <span>Country: {item.book_publication_country}</span>\n                    <span>City: {item.book_publication_city}</span>\n                    <span>Pages: {item.book_pages}</span>\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n\n            ))}\n\n          </div>\n\n        </div>\n\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}